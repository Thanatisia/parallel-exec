#!/bin/env bash
: " 
Parallel Remote Execution utility using ssh [Reimplementation]

:: Setup

:: Synopsis/Syntax
ssh-exec {options} [exec] ...

:: Parameters
- Positionals
    + exec : Begin remote execution
- Optionals
    - With Arguments
        + --add-remote-host [new-host-IP-address] [new-host-username] : Temporarily define/add a new remote host IP address and username to ssh to
    - Flags
        + --generate-config : Enable auto-generating of configuration/command files if doesnt exist
        + -h | --help : Display help menu and detailed information

:: Usage

"

# Define variables

## Commands
cmds=() # List of commands to execute

init()
{
    ## Remote entities
    declare -gA remote_entities=(
        # [key]="value"
        # key: remote user
        # value: host IP
        ["192.168.1.53"]="asura"
        ["192.168.1.90"]="asura"
        ["192.168.1.97"]="asura"
    )
}

remote_exec()
{
    # Loop through all remote entities
    for entity_hostIP in ${!remote_entities[@]}; do

        # Get username 
        entity_username=${remote_entities["$entity_hostIP"]}
        
        # Prepare remote entity details
        remote_user="$entity_username"
        remote_hosts="$entity_hostIP"
        remote_cfg="$remote_hosts.txt"

        # Check if configuration file exists
        if [[ ! -f "$remote_cfg" ]]; then
            # Configuration file for remote entity doesnt exist
            echo -e "Error: Configuration file [$remote_cfg] for target session [$remote_user@$remote_hosts] doesnt exist."
            echo -e "\tPlease create and place all your commands into it before proceeding."

            # Exit
            exit 1
        fi

        # Read remote host configuration file file
        readarray -t cmds < $remote_cfg

        # Format command string
        cmd_exec="" # Command to execute
        cmd_size="${#cmds[@]}"

        # Check if content has a empty trailing whitespace
        last_element_ID=$((cmd_size - 1))
        last_element="${cmds[$last_element_ID]}"
        if [[ "$last_element" == "" ]]; then
            # Trailing whitespace
            # Exit
            echo -e "Error: Please remove the empty newline at the bottom of the file [$remote_cfg] before starting."
            exit 1
        fi

        # No issues
        for cmd_num in "${!cmds[@]}"; do
            # Get current command
            curr_cmd="${cmds[$cmd_num]}"

            # Format and join

            # Check if current queue is the last element
            if [[ ! $cmd_num -eq $((cmd_size - 1)) ]]; then
                # If is not the last element
                cmd_exec+="$curr_cmd && "
            else
                # Last element
                cmd_exec+="$curr_cmd"
            fi
        done

        # Execute commands into ssh
        ssh $remote_user@$remote_hosts << EOF
$cmd_exec
EOF

        echo -e ""
    done
}

main()
{
    argv=("$@")
    argc="${#argv[@]}"

    ## Check if there are arguments
    if [[ "$argc" -gt 0 ]]; then
        ## There are arguments
        while [[ "$1" != "" ]]; do
            ## While there are still arguments
            case "$1" in
                "--add-remote-host")
                    ## Add another remote host and username into the array/list/dictionary

                    ### Check if there are arguments
                    ## Check for the new remote host's IP address
                    if [[ "$2" != "" ]]; then
                        ### There are
                        new_hostIP="$2"

                        ## Check for the new remote host's username
                        if [[ "$3" != "" ]]; then
                            ### There are
                            new_username="$3"
                            shift 1

                            ## Append new remote host into array
                            remote_entities+=(["$new_hostIP"]="$new_username")
                        else
                            echo -e "No remote host username provided."
                            shift 1
                        fi

                        shift 1
                    else
                        echo -e "No remote host provided."
                        shift 1
                    fi
                    shift 1
                    ;;
                "exec")
                    ## Begin the remote execution
                    remote_exec
                    shift 1
                    ;;
                "-h" | "--help")
                    ## Display help message
                    echo -e "[Display Help]"
                    shift 1
                    ;;
                *)
                    # Invalid Argument
                    echo -e "Invalid argument provided: $1"
                    shift 1
                    ;;
            esac
        done
    else
        echo -e "No arguments provided."
    fi
}

if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    init
    main "$@"
fi 
