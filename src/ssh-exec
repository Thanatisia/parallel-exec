#!/bin/env bash
: " 
Parallel Remote Execution utility using ssh

:: Synopsis/Syntax
ssh-exec {options} [exec] ...

:: Parameters
- Positionals
    + exec : Begin remote execution
- Optionals
    + -a | --append : Append a new command to execute
    + --domain : Specify hostname/domain/IP address
    + --parallel-opts : Specify options to parse into Multithreading/parallelism utility 'parallel'
    + --reset-parallel-opts : Reset all options provided into the parallel options array
    + --username : Specify username to execute in

:: Usage
- Sending to multiple remote hosts
    ssh-exec --username asura --domain 192.168.1.1 -a 'echo Hello World' -a 'echo Hello World 2' exec \     # First system
             --username asura --domain 192.168.1.2 -a 'echo Hello World' -a 'echo Hello World 2' exec ...   # Second system
"

remote_exec()
{
    : "
    Remotely execute commands parsed in via SSH to other devices
    "
    username="$1"
    domain="$2"
    functions=("${@:2}") # Take in all functions

    # Remotely execute all commands parsed in to the remote host
    ssh $username@$domain ${functions[@]}
}

main()
{
    # Get Command Line Arguments
    argv=("$@")
    argc="${#argv[@]}"

    # Initialize Variables
    cmd_arr=()
    username=""
    domain=""
    parallel_opts=("-j4") # Set multithreading/parallel options

    # Process Command Line Arguments
    if [[ "$argc" -gt 0 ]]; then
        # Check if there are arguments
        while [[ "$1" != "" ]]; do
            # While there are still arguments
            # Loop through and get arguments
            case "$1" in
                "-a | --append")
                    # Append command to the command list
                    ## Get argument to option
                    if [[ "$2" != "" ]]; then
                        # If command is provided
                        cmd_arr+=("$2")
                        shift 1
                    fi
                    shift 1
                    ;;
                "--domain")
                    # Specify IP address/Hostname/domain name
                    if [[ "$2" != "" ]]; then
                        # If ip address/domain is provided
                        domain="$2"
                        shift 1
                    fi
                    shift 1
                    ;;
                "--parallel-opts")
                    # Specify Multithreading/parallel options
                    if [[ "$2" != "" ]]; then
                        # If options are provided
                        parallel_opts+=("$2")
                        shift 1
                    fi
                    shift 1
                    ;;
                "--reset-parallel-opts")
                    # Reset the options for command 'parallel'
                    parallel_opts=()
                    shift 1
                    ;;
                "--username")
                    # Specify username to login to
                    if [[ "$2" != "" ]]; then
                        # If username is provided
                        username="$2"
                        shift 1
                    fi
                    shift 1
                    ;;
                "exec")
                    # Execute command
                    parallel $parallel_opts remote_exec "${cmd_arr[@]}" # Perform multithreading/Parallel execution

                    # Reset variables after execution
                    cmd_arr=()

                    # Shift argument list back one time
                    shift 1
                    ;;
                *)
                    # Invalid argument
                    shift 1
                    ;;
            esac
        done
    fi
}

if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi
